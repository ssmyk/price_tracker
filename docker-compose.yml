version: '3.9'
networks:
  iservices:
    external:
      name: TrackingServices

services:
  web_app:
    build: web_app
    ports:
      - "5000:5000"
    networks:
      iservices:
        aliases:
          - tracking-backend
    container_name: web_app
    hostname: web_app
    command: ["python3", "run.py"]
    depends_on:
      web_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - TZ=Europe/Warsaw
    volumes:
      - C:\Users\ssmyk\PycharmProjects\price_tracker\web_app:/web_app


  scraper_api:
    build: scraper_api
    ports:
      - "5500:5500"
    networks:
      iservices:
        aliases:
          - tracking-scraper
    container_name: scraper_api
    hostname: scraper_api
    command: [ "python3", "run.py" ]
    depends_on:
      web_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - TZ=Europe/Warsaw
    volumes:
      - C:\Users\ssmyk\PycharmProjects\price_tracker\scraper_api:/scraper_api


  celery_worker:
    build: scraper_api
    networks:
      iservices:
        aliases:
          - tracking-worker-scraper
    container_name: celery_worker
    hostname: celery_worker
    depends_on:
      web_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - TZ=Europe/Warsaw
    command: ['celery', '-A', 'app.scraper', 'worker', '-l', 'info']


  celery_beat:
    build: scraper_api
    networks:
      iservices:
        aliases:
          - tracking-beat
    container_name: celery_beat
    hostname: celery_beat
    depends_on:
      web_db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - TZ=Europe/Warsaw
    command: [ 'celery', '-A', 'app.scraper', 'beat', '-l', 'info']


  web_db:
    image: postgres:14
    container_name: web_db
    hostname: web_db
    ports:
      - "5433:5432"
    networks:
      iservices:
        aliases:
          - tracking-db-backend
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - TZ=${TZ}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 30s
      retries: 6
    restart: always
    volumes:
      - ./data/db:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      iservices:
        aliases:
          - tracking-rabbitmq
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq/

    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 1s
      timeout: 3s
      retries: 30
    environment:
      - TZ=Europe/Warsaw




